import os
from ultralytics import YOLO
import cv2

# --- Configuration for Training ---
# This should match the OUTPUT_YOLO_ROOT from your conversion script
YOLO_DATASET_ROOT = r'D:\dl\yolo_dataset_seg' 

# Path to the data.yaml file generated by the conversion script
# This file *must* contain:
# nc: 1
# names: ['object']
DATA_YAML_PATH = os.path.join(YOLO_DATASET_ROOT, 'data.yaml')

# Choose a YOLO segmentation model.
MODEL_NAME = r"C:\Users\mp01\Documents\Personal\task\3D_object_detection\models\ultralytics\yolo11n-seg.pt" 

# Training Hyperparameters
NUM_EPOCHS = 100        
IMAGE_SIZE = 640        
BATCH_SIZE = 8          
DEVICE = 0              
PROJECT_NAME = 'yolo_generic_objects_segmentation' 
RESUME_TRAINING = False 

# --- Main execution block ---
if __name__ == '__main__':
    # It's good practice to add multiprocessing.freeze_support() on Windows,
    # though ultralytics often handles this implicitly. It doesn't hurt to include it.
    # from multiprocessing import freeze_support
    # freeze_support() 

    # --- Load the Model ---
    print(f"Loading YOLO model: {MODEL_NAME}")
    model = YOLO(MODEL_NAME)

    # --- Start Training ---
    print(f"Starting training for {NUM_EPOCHS} epochs with image size {IMAGE_SIZE}...")
    print(f"Using dataset from: {DATA_YAML_PATH}")

    results = model.train(
        data=DATA_YAML_PATH,     
        epochs=NUM_EPOCHS,       
        imgsz=IMAGE_SIZE,        
        batch=BATCH_SIZE,        
        device=DEVICE,           
        name=PROJECT_NAME,       
        resume=RESUME_TRAINING,  
    )

    print("\nTraining complete!")
    print(f"Best model saved at: {os.path.join('runs', 'segment', PROJECT_NAME, 'weights', 'best.pt')}")

    # --- Optional: Run Inference on a Test Image ---
    print("\nRunning inference on a sample image (optional)...")
    try:
        sample_image_path = os.path.join(YOLO_DATASET_ROOT, 'images', 'val', os.listdir(os.path.join(YOLO_DATASET_ROOT, 'images', 'val'))[0])
        if os.path.exists(sample_image_path):
            results = model(sample_image_path) # Perform inference
            for r in results:
                annotated_image = r.plot() # Get annotated image (Numpy array)
                cv2.imshow("Inference Result", annotated_image)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
                print(f"Inference results for {sample_image_path}:")
                print(f"  Detected {len(r.boxes)} objects.")
                if r.masks is not None:
                    print(f"  Masks shape: {r.masks.data.shape}")
        else:
            print(f"Could not find a sample image at {sample_image_path} for inference.")
    except ImportError:
        print("OpenCV (cv2) not found. Skipping inference visualization.")
    except Exception as e:
        print(f"Error during sample inference: {e}")